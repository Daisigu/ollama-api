stages:
  - test
  - build
  - deploy

variables:
  NODE_ENV: production

cache:
  paths:
    - node_modules/

test:
  stage: test
  image: node:20
  script:
    - npm ci
    - npm run lint
  except:
    - main

build:
  stage: build
  image: node:20
  script:
    - npm ci
    - npm i -g typescript
    - npm run build
  artifacts:
    paths:
      - dist
      - ecosystem.config.js
      - package*.json
      - .env.production # Добавим файл с переменными окружения для продакшена
    expire_in: 1 hour
  only:
    - main

deploy:
  stage: deploy
  image: node:20
  before_script:
    - 'which ssh-agent || apt-get update -qy && apt-get install -y openssh-client'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - apt-get update -qy && apt-get install -y rsync
  script:
    # Создаём файл с переменными окружения из CI/CD variables
    - |
      cat > .env.production << EOL
      PORT=${PORT}
      API_TOKEN=${API_TOKEN}
      OLLAMA_MODEL=${OLLAMA_MODEL}
      NODE_ENV=production
      EOL
    - ssh $SERVER_USERNAME@$SERVER_IP "mkdir -p $DEPLOY_PATH"
    # Копируем файлы на сервер
    - rsync -avz --delete dist package*.json ecosystem.config.js .env.production $SERVER_USERNAME@$SERVER_IP:$DEPLOY_PATH
    # Переименовываем .env.production в .env на сервере
    - ssh $SERVER_USERNAME@$SERVER_IP "cd $DEPLOY_PATH && mv .env.production .env"
    # Устанавливаем зависимости и перезапускаем приложение
    - ssh $SERVER_USERNAME@$SERVER_IP "cd $DEPLOY_PATH && npm ci --production"
    - ssh $SERVER_USERNAME@$SERVER_IP "cd $DEPLOY_PATH && pm2 restart ecosystem.config.js || pm2 start ecosystem.config.js"
  only:
    - main
  dependencies:
    - build
