image: node:20-alpine

stages:
  - validate
  - build
  - deploy

variables:
  NODE_ENV: production

.ssh-config: &ssh-config
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SERVER_IP $(ssh-keyscan $SERVER_IP 2>/dev/null)" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

lint:
  stage: validate
  script:
    - npm ci
    - npm run lint
  except:
    - main
  cache:
    policy: pull

typecheck:
  stage: validate
  script:
    - npm ci
    - npx tsc --noEmit
  except:
    - main
  cache:
    policy: pull

build:
  stage: build
  script:
    - npm ci
    - npm run build
    # Создаем .env файл для production
    - |
      cat > .env << EOF
      PORT=${PORT}
      API_TOKEN=${API_TOKEN}
      OLLAMA_MODEL=${OLLAMA_MODEL}
      NODE_ENV=production
      EOF
  artifacts:
    paths:
      - dist/
      - node_modules/
      - package.json
      - package-lock.json
      - ecosystem.config.js
      - .env
    expire_in: 1 hour
  only:
    - main

deploy:
  stage: deploy
  image: node:20-alpine
  <<: *ssh-config
  script:
    # Создаем директорию если не существует
    - ssh $SERVER_USERNAME@$SERVER_IP "mkdir -p $DEPLOY_PATH"
    
    # Синхронизируем файлы
    - rsync -az --delete ./dist/ $SERVER_USERNAME@$SERVER_IP:$DEPLOY_PATH/dist/
    - rsync -az package*.json ecosystem.config.js .env $SERVER_USERNAME@$SERVER_IP:$DEPLOY_PATH/
    
    # Устанавливаем зависимости и перезапускаем приложение
    - |
      ssh $SERVER_USERNAME@$SERVER_IP "cd $DEPLOY_PATH && \
      npm ci --production && \
      if pm2 list | grep -q 'ollama-api'; then \
        pm2 reload ecosystem.config.js; \
      else \
        pm2 start ecosystem.config.js; \
      fi"
  only:
    - main
  dependencies:
    - build